#! /usr/bin/env python
# Copyright (C) 2015 Ben Lackey, Christopher M. Biwer
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
""" Adjusts the strain of the detector by varying the time-dependent
parameters.
"""

import argparse
import logging
import numpy
import pycbc
from pycbc import frame
from pycbc import strain as _strain
from pycbc_cal import adjust
from pycbc_cal import cal

def tf_from_file(path, delimiter=" "):
    """ Convert the contents of a file with the columns
    [freq, real(h), imag(h)] to a numpy.array with columns
    [freq, real(h)+j*imag(h)].
    """
    data = numpy.loadtxt(path, delimiter=delimiter)
    freq = data[:, 0]
    h = data[:, 1] + 1.0j * data[:, 2]
    return numpy.array([freq, h]).transpose()

# command line usage
parser = argparse.ArgumentParser(usage=__file__ + " [--options]",
                                 description=__doc__)

# model parameters options
parser.add_argument("--fc0", type=float, required=True,
                    help="Initial cavity pole frequency in Hertz.")
parser.add_argument("--delta-fc", type=float, required=True,
                    help="Change in the cavity pole frequency in Hertz.")
parser.add_argument("--kappa-tst-re", type=float, required=True,
                    help="New real part of gain in the test mass "
                         "actuation function A_{tst} "
                         "(initially 1.0 at t_0).")
parser.add_argument("--kappa-tst-im", type=float, required=True,
                    help="New imaginary part of gain in the test mass "
                         "actuation function A_{tst} "
                         "(initially 0.0 at t_0).")
parser.add_argument("--kappa-pu-re", type=float, required=True,
                    help="New real part of gain in the actuation "
                         "function A_{pu} (initially 1.0 at t_0).")
parser.add_argument("--kappa-pu-im", type=float, required=True,
                    help="New imaginary part of gain in the actuation "
                         "function A_{pu} (initially 0.0 at t_0).")
parser.add_argument("--kappa-c", type=float, required=True,
                    help="New gain in the sensing function C "
                         "(initially 1.0 at t_0).")

# calibration data options
parser.add_argument("--transfer-function-a-tst", type=str, required=True,
                  help="Path to ASCII file that contains reference actuation "
                       "function A_tst for test mass.")
parser.add_argument("--transfer-function-a-pu", type=str, required=True,
                  help="Path to ASCII file that contains reference actuation "
                       "function A_pu for the upper pendulum stages.")
parser.add_argument("--transfer-function-c", type=str, required=True,
                  help="Path to ASCII file that contains reference "
                       "sensing function.")
parser.add_argument("--transfer-function-d", type=str, required=True,
                  help="Path to ASCII file that contains reference "
                       "digital filters.")

# output options
parser.add_argument("--output-frame", type=str, required=True,
                  help="Path of frame file to write adjusted strain.")

# logging options
parser.add_argument("--verbose", action="store_true",
                  help="Display progress.")

# add option groups
_strain.insert_strain_option_group(parser)

# parse command line
opts = parser.parse_args()

# set log
pycbc.init_logging(opts.verbose)

# get complex-valued transfer functions
logging.info("Reading transfer functions from files")
tf_a_tst = tf_from_file(opts.transfer_function_a_tst)
tf_a_pu = tf_from_file(opts.transfer_function_a_pu)
tf_c = tf_from_file(opts.transfer_function_c)
tf_d = tf_from_file(opts.transfer_function_d)

# set initial calibration for each epoch
freqlist = tf_c[:, 0]
cal = cal.Calibration(freq=freqlist, fc0=opts.fc0,
                      C0=tf_c[:, 1], D0=tf_d[:, 1],
                      Atst0=tf_a_tst[:, 1], Apu0=tf_a_pu[:, 1])

# get strain
strain = _strain.from_cli(opts)

# adjust strain with time-varying parameters from command line
logging.info("Adjusting strain")
strain_adjusted = adjust.adjust_strain(strain, cal, 
                                       delta_fc=opts.delta_fc,
                                       kappa_c=opts.kappa_c, 
                                       kappa_tst_re=opts.kappa_tst_re,
                                       kappa_tst_im=opts.kappa_tst_im, 
                                       kappa_pu_re=opts.kappa_pu_re,
                                       kappa_pu_im=opts.kappa_pu_im)

# write frame file with adjusted strain
logging.info("Writing frame with adjusted strain")
frame.write_frame(opts.output_frame, opts.channel_name, strain_adjusted)

# exit
logging.info("Finished")
